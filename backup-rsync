#!/bin/bash
#
# This script creates rsync backups of a server
#
# Original authors: https://www.heinlein-support.de
# Original source: https://www.heinlein-support.de/projekte/rsync-backup/backup-rsync
#
# Translated and enhanced by Mattanja Kern <https://github.com/mattanja/rsync-backup-and-rotate>
#
# Usage: backup-rsync [-e /etc/excludefile] [-o extra rsync options] [-p /backup/path] <fqdn-servername>
#

# ### Configuration
# Check available space?
CHECK_HDMINFREE=true
HDMINFREE=95

# Mount backup partition as readonly after writing the backup?
MOUNT_RO=false
MOUNT_DEVICE=/dev/md3

# Backup path (server name and rotation dirs will be appended)
DATA_PATH=/home/backup

# Liste von Dateipattern, die nicht gebackupt werden sollen
EXCLUDES=/root/.excludeliste-rsync

# Additional rsync options.
# Example: EXTRAOPT="--bwlimit=196" to limit bandwidth-usage
EXTRAOPT=""

# Read parameter options
OPTIND=1
while getopts ":s:e:o:p:" opt; do
	case $opt in
		s)
			SSH_ADDRESS="$OPTARG"
			;;
		e)
			EXCLUDES="$OPTARG"
			;;
		o)
			EXTRAOPT="$OPTARG"
			;;
		p)
			DATA_PATH="$OPTARG"
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			logger "Invalid option: -$OPTARG" >&2
			echo "Use backup-rsync [-s user@servername] [-e path/to/excludelist] [-o additional excludes] -p /target/data/path <servername>"
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			logger "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# ### first parameter after options must be FQDN of the server
if [ -n "$1" ] ; then
	TARGETNAME="$1"
else
	echo "Error: Usage $0 <fqdn-hostname>"
	exit 1
fi

# Log config info
echo "Extra options: $EXTRAOPT"
logger "Extra options: $EXTRAOPT"
echo "Backup path: $DATA_PATH"
logger "Backup path: $DATA_PATH"

if [ -n "$SSH_ADDRESS" ] ; then
# If parameter -s is provided, use it as target address for rsync command (including username)
	echo "SSH_ADDRESS provided: $SSH_ADDRESS"
	RSYNCSERVERPATH="$SSH_ADDRESS:/"
elif [ $TARGETNAME = "localhost" ] ; then
# If server is localhost, use simple local path
	echo "Targetname localhost"
	RSYNCSERVERPATH="/"
else
	echo "Targetname provided: $TARGETNAME"
	RSYNCSERVERPATH="$TARGETNAME:/"
fi

# Make sure file for excludelist exists
if [ -f $EXCLUDES ] ; then
	echo "Using excludelist: $EXCLUDES"
	logger "Using excludelist: $EXCLUDES"
else
	# Fail
	echo "Could not find excludelist $EXCLUDES"
	logger "Could not find excludelist $EXCLUDES"
	exit 1
fi

# ### LetÂ´s Rock`n`Roll

# Check disk space
GETPERCENTAGE='s/.* \([0-9]\{1,3\}\)%.*/\1/'
if $CHECK_HDMINFREE ; then
	KBISFREE=`df /$DATA_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
	INODEISFREE=`df -i /$DATA_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
	if [ $KBISFREE -ge $HDMINFREE -o $INODEISFREE -ge $HDMINFREE ] ; then
		echo "Fatal: Not enough space left for rsyncing backups!"
		logger "Fatal: Not enough space left for rsyncing backups!"
		exit 1
	fi
fi

# Mount disk as read/write if configured
if $MOUNT_RO ; then
	if `mount -o remount,rw $MOUNT_DEVICE $DATA_PATH` ; then
	echo mount -o remount,rw $MOUNT_DEVICE $DATA_PATH
		echo "Error: Could not remount $MOUNT_DEVICE readwrite"
		logger "Error: Could not remount $MOUNT_DEVICE readwrite"
		exit
	fi
fi

# Ggf. Verzeichnis anlegen
if ! [ -d $DATA_PATH/$TARGETNAME/daily.0 ] ; then
	mkdir -p $DATA_PATH/$TARGETNAME/daily.0
fi

# Los geht`s: rsync zieht ein Vollbackup
echo "Starting rsync backup from $TARGETNAME..."
logger "Starting rsync backup from $TARGETNAME..."

echo "rsync -avz --numeric-ids -e ssh \
--delete --delete-excluded	\
--out-format="%t %f" \
--exclude-from="$EXCLUDES" $EXTRAOPT \
$RSYNCSERVERPATH \
$DATA_PATH/$TARGETNAME/daily.0"

rsync -avz --numeric-ids -e ssh \
	--delete --delete-excluded	\
	--out-format="%t %f" \
	--exclude-from="$EXCLUDES" $EXTRAOPT \
	$RSYNCSERVERPATH \
	$DATA_PATH/$TARGETNAME/daily.0

# Validate return code
# 0 = no error,
# 24 is fine, happens when files are being touched during sync (logs etc)
# all other codes are fatal -- see man (1) rsync
if ! [ $? = 24 -o $? = 0 ] ; then
	echo "Fatal: rsync finished $TARGETNAME with errors!"
	logger "Fatal: rsync finished $TARGETNAME with errors!"
fi

# Touch dir to set backup date
touch $DATA_PATH/$TARGETNAME/daily.0

# Done
echo "Finished rsync backup from $TARGETNAME..."
logger "Finished rsync backup from $TARGETNAME..."

# Sync disks to make sure data is written to disk
sync

# Remount disk as read-only
if $MOUNT_RO ; then
	if `mount -o remount,ro $MOUNT_DEVICE $DATA_PATH` ; then
		echo "Error: Could not remount $MOUNT_DEVICE readonly"
		logger "Error: Could not remount $MOUNT_DEVICE readonly"
		exit
	fi
fi